name: Deploy Symfony API with MySQL and Nginx

on:
    push:
        branches:
            - despliegueDocker

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout código
              uses: actions/checkout@v4

            - name: Iniciar sesión en Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            # Construir y subir imagen Symfony
            - name: Construir y subir imagen Symfony
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest -f backend/EdelmiroMonros/docker/php.Dockerfile backend/EdelmiroMonros/
                  docker push ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest

            # Construir y subir imagen Nginx
            - name: Construir y subir imagen Nginx
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest -f backend/EdelmiroMonros/docker/nginx.Dockerfile backend/EdelmiroMonros/
                  docker push ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Checkout código
              uses: actions/checkout@v4
              with:
                  ref: despliegueDocker # Asegura que se usa esta rama

            - name: Verificar estructura del repositorio
              run: |
                  echo "Directorio actual: $(pwd)"
                  ls -R

            - name: Transferir el archivo compose.yml al servidor remoto
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  source: ${{ github.workspace }}/backend/EdelmiroMonros/compose.yml
                  target: ~/deploy/
                  strip_components: 4

            - name: Desplegar en servidor remoto
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      sudo chmod 666 /var/run/docker.sock
                      echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

                      docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml pull
                      docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml down
                      docker-compose -f /home/${{ secrets.REMOTE_USER }}/deploy/compose.yml up -d --force-recreate

            - name: Crear archivo .env en el contenedor Symfony
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      docker exec symfony_app sh -c 'echo "APP_ENV=prod" > /var/www/html/.env'
                      docker exec symfony_app sh -c 'echo "APP_DEBUG=0" >> /var/www/html/.env'
                      docker exec symfony_app sh -c 'echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> /var/www/html/.env'
                      docker exec symfony_app sh -c 'echo "CORS_ALLOW_ORIGIN=*" >> /var/www/html/.env'
                      docker exec symfony_app sh -c 'echo "MAILER_DSN=null://null" >> /var/www/html/.env'
                      docker exec symfony_app sh -c 'echo "MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0" >> /var/www/html/.env'

            - name: Ejecutar post-install-cmd en el contenedor Symfony
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      docker exec symfony_app composer run-script post-install-cmd
                      docker exec symfony_app php bin/console cache:clear --env=prod

            - name: Crear la base de datos si no existe y ejecutar migraciones
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      docker exec symfony_app php bin/console doctrine:database:create --if-not-exists
                      docker exec symfony_app php bin/console doctrine:migrations:migrate --no-interaction

            - name: Mostrar contenido del archivo de migración más reciente
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.REMOTE_HOST }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_KEY }}
                  script: |
                      latest_migration=$(docker exec symfony_app ls -t /var/www/html/migrations | head -n 1)
                      docker exec symfony_app cat /var/www/html/migrations/$latest_migration
